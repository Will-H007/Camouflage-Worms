{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-e7e52123-127b-4657-9332-0c4c5cef11ea.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1712801751773,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"},"nbgrader":{"__altered":false,"__hash":-335098374,"_root":{"entries":[["cocalc_minimal_stubs",false]],"ownerID":{}},"cocalc_minimal_stubs":false,"size":1}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1712800441912,"exec_count":1,"id":"9aa69c","input":"class Camo_Worm:\n    def __init__(self, x, y, r, theta, deviation_r, deviation_gamma, width, colour):\n        self.x = x\n        self.y = y\n        self.r = r\n        self.theta = theta\n        self.dr = deviation_r\n        self.dgamma = deviation_gamma\n        self.width = width\n        self.colour = colour\n        p0 = [self.x - self.r * np.cos(self.theta), self.y - self.r * np.sin(self.theta)]\n        p2 = [self.x + self.r * np.cos(self.theta), self.y + self.r * np.sin(self.theta)]\n        p1 = [self.x + self.dr * np.cos(self.theta+self.dgamma), self.y + self.dr * np.sin(self.theta+self.dgamma)]\n        self.bezier = mbezier.BezierSegment(np.array([p0, p1,p2]))\n\n    def control_points (self):\n        return self.bezier.control_points\n\n    def path (self):\n        return mpath.Path(self.control_points(), [Path.MOVETO, Path.CURVE3, Path.CURVE3])\n\n    def patch (self):\n        return mpatches.PathPatch(self.path(), fc='None', ec=str(self.colour), lw=self.width, capstyle='round')\n\n    def intermediate_points (self, intervals=None):\n        if intervals is None:\n            intervals = max(3, int(np.ceil(self.r/8)))\n        return self.bezier.point_at_t(np.linspace(0,1,intervals))\n\n    def approx_length (self):\n        intermediates = intermediate_points(self)\n        eds = euclidean_distances(intermediates,intermediates)\n        return np.sum(np.diag(eds,1))\n\n    def colour_at_t(self, t, image):\n        intermediates = np.int64(np.round(np.array(self.bezier.point_at_t(t)).reshape(-1,2)))\n        colours = [image[point[0],point[1]] for point in intermediates]\n        return(np.array(colours)/255)\n","kernel":"python3","pos":4,"start":1712800441906,"state":"done","type":"cell"}
{"cell_type":"code","end":1712800443583,"exec_count":2,"id":"75bfc2","input":"# Imports\n\nimport numpy as np\nimport imageio.v3 as iio\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.path as mpath\nimport matplotlib.patches as mpatches\nimport matplotlib.bezier as mbezier\nfrom sklearn.metrics.pairwise import euclidean_distances\n\nrng = np.random.default_rng()\nPath = mpath.Path\nmpl.rcParams['figure.dpi']= 72 #size of images\n","kernel":"python3","pos":1,"start":1712800441916,"state":"done","type":"cell"}
{"cell_type":"code","end":1712800443594,"exec_count":3,"id":"7a7ede","input":"# Global variables\n\nIMAGE_DIR = 'images'\nIMAGE_NAME='original'\nMASK = [320, 560, 160, 880] # ymin ymax xmin xmax","kernel":"python3","pos":2,"start":1712800443591,"state":"done","type":"cell"}
{"cell_type":"code","end":1712800444355,"exec_count":4,"id":"6b7608","input":"# Read, crop and display image and stats\n\ndef crop (image, mask):\n    h, w = np.shape(image)\n    return image[max(mask[0],0):min(mask[1],h), max(mask[2],0):min(mask[3],w)]\n\ndef prep_image (imdir, imname, mask):\n    print(\"Image name (shape) (intensity max, min, mean, std)\\n\")\n    image = np.flipud(crop(iio.imread(imdir+'/'+imname+\".png\"), mask))\n    print(\"{} {} ({}, {}, {}, {})\".format(imname, np.shape(image), np.max(image), np.min(image), round(np.mean(image),1), round(np.std(image),1)))\n    plt.imshow(image, vmin=0, vmax=255, cmap='gray', origin='lower') # use vmin and vmax to stop imshow from scaling\n    plt.show()\n    return image\n\nimage = prep_image(IMAGE_DIR, IMAGE_NAME, MASK)","kernel":"python3","output":{"0":{"name":"stdout","text":"Image name (shape) (intensity max, min, mean, std)\n\noriginal (240, 720) (210, 0, 49.3, 34.8)\n"},"1":{"data":{"image/png":"715c57c7df0e8d2e4e057faade516ef89a472fbd","text/plain":"<Figure size 864x504 with 1 Axes>"},"metadata":{"image/png":{"height":254,"width":710},"needs_background":"light"}}},"pos":3,"start":1712800443601,"state":"done","type":"cell"}
{"cell_type":"code","end":1712800444378,"exec_count":5,"id":"f71335","input":"class Drawing:\n    def __init__ (self, image):\n        self.fig, self.ax = plt.subplots()\n        self.image = image\n        self.im = self.ax.imshow(self.image, cmap='gray', origin='lower')\n\n    def add_patches(self, patches):\n        try:\n            for patch in patches:\n                self.ax.add_patch(patch)\n        except TypeError:\n            self.ax.add_patch(patches)\n\n    def add_dots(self, points, radius=4, **kwargs):\n        try:\n            for point in points:\n                self.ax.add_patch(mpatches.Circle((point[0],point[1]), radius, **kwargs))\n        except TypeError:\n            self.ax.add_patch(mpatches.Circle((points[0],points[1]), radius, **kwargs))\n\n    def add_worms(self, worms):\n        try:\n            self.add_patches([w.patch() for w in worms])\n        except TypeError:\n            self.add_patches([worms.patch()])\n\n    def show(self, save=None):\n        if save is not None:\n            plt.savefig(save)\n        plt.show()\n","kernel":"python3","pos":5,"start":1712800444376,"state":"done","type":"cell"}
{"cell_type":"code","end":1712800444459,"exec_count":6,"id":"760272","input":"# Example of a random worm. You may do this differently.\n\n    # centre points, angles and colour chosen from uniform distributions\n    # lengths chosen from normal distributions with two std parameters passed\n    # width chosen from gamma distribution with shape parameter 3 and scale passed\n\ndef random_worm (imshape, init_params):\n    (radius_std, deviation_std, width_theta) = init_params\n    (ylim, xlim) = imshape\n    midx = xlim * rng.random()\n    midy = ylim * rng.random()\n    r = radius_std * np.abs(rng.standard_normal())\n    theta = rng.random() * np.pi\n    dr = deviation_std * np.abs(rng.standard_normal())\n    dgamma = rng.random() * np.pi\n    colour = rng.random()\n    width = width_theta * rng.standard_gamma(3)\n    return Camo_Worm(midx, midy, r, theta, dr, dgamma, width, colour)\n","kernel":"python3","pos":6,"start":1712800444454,"state":"done","type":"cell"}
{"cell_type":"code","end":1712800444469,"exec_count":7,"id":"490892","input":"# Initialise a random clew\n\ndef initialise_clew (size, imshape, init_params):\n    clew = []\n    for i in range(size):\n        clew.append(random_worm(imshape, init_params))\n    return clew","kernel":"python3","pos":7,"start":1712800444463,"state":"done","type":"cell"}
{"cell_type":"code","end":1712800445234,"exec_count":8,"id":"2fee07","input":"# Initialise clew of 40 and draw\n\nclew = initialise_clew(40, image.shape, (40, 30, 1))\ndrawing = Drawing(image)\ndrawing.add_worms(clew)\ndrawing.show()","kernel":"python3","output":{"0":{"data":{"image/png":"69bebc3dc7a07086bdc92cf4f9a44051874e211c","text/plain":"<Figure size 864x504 with 1 Axes>"},"metadata":{"image/png":{"height":254,"width":710},"needs_background":"light"}}},"pos":8,"start":1712800444478,"state":"done","type":"cell"}
{"cell_type":"code","end":1712800446012,"exec_count":9,"id":"02d6cd","input":"# Draw a single worm along with control points and some sample points\n\nworm = Camo_Worm(200, 100, 50, np.pi/6, 70, np.pi/3, 10, 0.8)\ndrawing = Drawing(image)\ndrawing.add_worms(worm)\ndrawing.add_dots(worm.intermediate_points(8), radius=2, color='green')\ndrawing.add_dots(worm.control_points(),color='orange')\ndrawing.add_dots((200,100), color='blue')\n\ndrawing.show(save='bezier.png')","kernel":"python3","output":{"0":{"data":{"image/png":"2119c1b9d8424443727fb1ef928a6cd5625881a6","text/plain":"<Figure size 864x504 with 1 Axes>"},"metadata":{"image/png":{"height":254,"width":710},"needs_background":"light"}}},"pos":9,"start":1712800445255,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5ee552","input":"&copy; Cara MacNish, UWA, 2024","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"be066c","input":"### CITS4404 Practical Project\n\n# Camo Worms!\n\n<div style=\"margin-left: 0px\">\n    &nbsp;\n    <img src=\"velvet-worms.jpg\" width=600>\n    <br>\n    <br>\n</div>\n\nAustralian _velvet worms_ come in many colours, possibly as a camouflage function ([Current Biology](https://www.cell.com/current-biology/comments/S0960-9822(11)00208-9)).","pos":0,"type":"cell"}
{"id":0,"time":1712800155757,"type":"user"}
{"last_load":1712800155710,"type":"file"}